### Importations ###
from math import *
### Paramètres ###
### Fonctions ###

def conversionPolaireCartesien(r,theta):
    return (x,y)

def convertCartesienPolaire(x,y):
    return (r,theta)

def distance(P1,P2):
    """Renvoie la distance entre 2 points P1 et P2."""
    return sqrt((P1[0]-P2[0])**2+(P1[1]-P2[1])**2)


### Classes ###

class Terrain():
    """Terrain dans lequel la foule se déplace."""
    def __init__(self, largeur, longueur,
            obstacle=None, voyageur=None ):
        # Dimension du terrain
        self.largeur=largeur
        self.longueur=longueur

        # Organisation du terrain
        self.listAcces=[]
        self.listObstacles=[]
        self.initObstacleFixes()

        # Voyageurs
        self.listVoyageurs=[]

        # Go !
        self.bouclePrincipale()

    def initObstacleFixes(self):
        """Initialise le terrain avant l'arrivée des voyageurs."""
        # Ajout des murs
        None # A faire
        # Ajout des obstacles
        None # A faire avec le self.getObstacle

    def creerObstacle(self, centre, rayon, forme):
        """Crée un obstacle."""
        self.listObstaclesFixes.append(Obstacle(centre, rayon, forme))

    def creerVoyageur(self, centre, rayon):
        """Crée un nouveau voyageur."""
        self.listVoyageurs.append(Voyageur(centre, rayon, depart))

    def getObstacle(self, point, cote):
        """Renvoie une liste des obstacles dont le centre est dans un carré de centre point et de coté 2*cote."""
        obstacles=[]
        for obst in self.listObstaclesFixes:
            if True:
                osbtacles.append(obst)
        for voya in self.listVoyageurs:
            if True:
                obstacles.append(voya)
        return obstacles

    def avanceVoyageur(self):
        """Fait avancer tous les voyageurs d'un cran."""
        for voya in self.listVoyageurs:
            voya.avance()

    def bouclePrincipale()
        while True:
            None


class Obstacle:
    """Les obstacles sont des disques, qui peuvent etre fixes, ou non comme les voyageurs,
        Les murs sont des disques de rayon infini...
        boss=Terrain , centre=complex , rayon=float
        *forme="disque","carré" ou "murN","murS","murE","murW" #sert uniquement pour l'affichage
        *couleur
    """
    def __init__(self,boss, centre,rayon,forme="voyageur", arrivee=None, )):
        self.boss=boss # Terrain dans lequel se trouve l'obstacle

        self.coordCentre=centre
        self.rayon=rayon
        self.forme=forme

        self.couleur=couleur


        self.arrivee=arrivee

        self.vitesseNorme= int # Const
        self.vitesseAngle
        self.vitesseVecteur=[int, int]

        positionSuivante
        listColision


    def getEtat(self):
        """Renvoie un dictionnaire avec le centre, le rayon et la forme de l'obstacle."""
        return {"centre":self.centre, "rayon":self.rayon, "forme":self.forme}



    def colision(self, obstacle):
        return True//False

    def avancer

    def ChangerDirection

    def testFin













